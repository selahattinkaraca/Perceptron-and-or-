
ciktilar=[[1,-1,-1,-1],[-1,1,-1,-1],[-1,-1,1,-1],[-1,-1,-1,1]]
#A_1=[[1,-1,1,1,-1,-1,-1],[-1,-1,-1,1,-1,-1,-1],[-1,-1,-1,1,-1,-1,-1],[-1,-1,1,-1,1,-1,-1],[-1,-1,1,-1,1,-1,-1],[-1,1,1,1,1,1,-1],[-1,1,-1,-1,-1,1,-1],[-1,1,-1,-1,-1,1,-1],[1,1,1,-1,1,1,1]]
font1_abcd=[[-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,1,-1,-1,-1,-1,1,-1,1,-1,-1,-1,1,1,1,1,1,-1,-1,1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,1,-1,1,1,1,-1,1,1,1],
            [1,1,1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,1,-1,-1,-1,-1,1,-1,1,-1,-1,-1,-1,1,-1,1,1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,1,-1,-1,-1,-1,1,-1,1,-1,-1,-1,-1,1,1,1,1,1,1,1,-1],
            [-1,-1,1,1,1,1,1,-1,1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,1,1,1,1,-1],
            [1,1,1,1,1,-1,-1, -1,1,-1,-1,-1,1,-1, -1,1,-1,-1,-1,-1,1, -1,1,-1,-1,-1,-1,1, -1,1,-1,-1,-1,-1,1, -1,1,-1,-1,-1,-1,1, -1,1,-1,-1,-1,-1,1, -1,1,-1,-1,-1,1,-1, 1,1,1,1,1,-1,-1]
            ]
font2_abcd=[[-1,-1,-1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,1,-1,-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,1,1,1,1,1,-1,-1,1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,1,-1],
            [1,1,1,1,1,1,-1,1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,-1,1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,-1],
            [-1,-1,1,1,1,-1,-1,-1,1,-1,-1,-1,1,-1,1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,-1,-1,1,1,1,-1,-1],
            [1,1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1,1,1,-1,-1]
]
font3_abcd=[[-1,-1,-1,1,-1,-1,-1, -1,-1,-1,1,-1,-1,-1, -1,-1,1,-1,1,-1,-1, -1,-1,1,-1,1,-1,-1, -1,1,-1,-1,-1,1,-1, -1,1,1,1,1,1,-1, 1,-1,-1,-1,-1,-1,1, 1,-1,-1,-1,-1,-1,1, 1,1,-1,-1,-1,1,1],
            [1,1,1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,1,-1,-1,-1,-1,1,-1,1,1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,1,-1,-1,-1,-1,1,-1,1,-1,-1,-1,-1,1,-1,1,-1,-1,-1,-1,1,1,1,1,1,1,1,-1],
            [-1,-1,1,1,1,-1,1,-1,1,-1,-1,-1,1,1,1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,-1,-1,1,1,1,-1,-1],
            [1,1,1,1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,1,-1,1,-1,-1,-1,-1,1,-1,1,-1,-1,-1,-1,1,-1,1,-1,-1,-1,-1,1,-1,1,-1,-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,1,1,1,1,-1,-1]
]

y=[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]
weights=[0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0
        ]
weights_a=[0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0
        ]
weights_b=[0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0
        ]
weights_c=[0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0
        ]
weights_d=[0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0
        ]


threshold=0.5

bias=0.1

def sum_unit_bul(weights,harfler_dizi):
    sum_unit=0
    for i in range(0,len(weights)):
        sum_unit+=harfler_dizi[i]*weights[i]
    #print("sum_ınit(x*w)=="+str(sum_unit))
    return sum_unit
def weights_düzenle(t,harfler_dizi):
    global weights
    global learning_rate
    for i in range(0, len(weights)):
        weights[i]=weights[i]+harfler_dizi[i]*t
def hesapla(dizi):
    sonuc_dizi=[0,0,0,0]
    global son_sonuc
    for j in range(0, 63):
        sonuc_dizi[0] += weights_a[j] * dizi[j]
        sonuc_dizi[1]+= weights_b[j] * dizi[j]
        sonuc_dizi[2]+= weights_c[j] * dizi[j]
        sonuc_dizi[3] += weights_d[j] * dizi[j]
    print("sonuc_dizi")
    print(sonuc_dizi)
    for i in range(0, 4):
        if sonuc_dizi[i] > 0:
            sonuc_dizi[i] = 1
        else:
            sonuc_dizi[i] = 0
    print(sonuc_dizi)
    if(sum(sonuc_dizi)==1):
        son_sonuc=sonuc_dizi



def weights_sıfırla():
    for i in range(0, 63):
        weights[i] = 0

k=0
bias=0
son_sonuc=[]
weights_abcd=[[],[],[],[]]
def egit(dizi):
    k = 0
    global bias
    global ciktilar
    for j in range(0, 105):
        global_delta = 0
        print("Döngü="+str(j))
        for i in range(0, 4):
            actual = ciktilar[k][i]
            sum_unit = bias + sum_unit_bul(weights, dizi[i])
            #print("k==" + str(k) + " i==" + str(i) + "bias" + str(bias) + "y[]==" + str(y) + "çıktılar[k][i]" + str(ciktilar[k][i]) + "çıktılar" + str(ciktilar))
            if (sum_unit > threshold):
                value = 1
                y[k][i] = value
            elif (sum_unit <= threshold and sum_unit >= (-1 * threshold)):
                value = 0
            elif (sum_unit < (-1 * threshold)):
                value = -1
                y[k][i] = value
            bias = bias + actual
            delta = actual - value
            global_delta = global_delta + abs(delta)
            print("Prediction :", y, "whereas actual :", ciktilar[0][i], "error", delta, "global delta", global_delta)
            weights_düzenle(delta, dizi[i])
        print("-------------------------")
        if global_delta == 0:
            if (k == 0):
                for i in range(0, 63):
                    weights_a[i] = weights[i]
            if (k == 1):
                for i in range(0, 63):
                    weights_b[i] = weights[i]
            if (k == 2):
                for i in range(0, 63):
                    weights_c[i] = weights[i]
            if (k == 3):
                for i in range(0, 63):
                    weights_d[i] = weights[i]

            # bias=0
            k += 1
        if global_delta == 0 and k == 4:
            break


dizi=font1_abcd[3]  #Dizi değerini burdaki dizi içerisindekine göre bulmaktadır
egit(font1_abcd)
hesapla(dizi)

weights_sıfırla()
bias=0
egit(font2_abcd)
hesapla(dizi)

weights_sıfırla()
bias=0
egit(font3_abcd)
hesapla(dizi)
print("Sonuc=="+str(son_sonuc))
print(" A  B  C  D")
print(son_sonuc)